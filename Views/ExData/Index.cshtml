<div class="">    
        <div class="text-center">
         <h2 style="margin-top:5px">丝印摆料看板</h2>
         <a class="btn btn-sm btn-primary" href="~/Asset/Excel/Template.xlsx"><i class="fas fa-download"></i>Download Excel Template File</a>
         <button class="btn btn-sm btn-primary" onclick="$('#upload').click()"><i class="far fa-file-excel"></i>Upload Excel Data File </button>
        </div>
        <div id="GRID" style="max-height: 98vh !important;margin:auto; Width: 98vw !important ">
        </div>
        <script>
            var data_mor, data_aft;
        </script>  
</div>
<form enctype="multipart/form-data" style="display:none">
    <input id="upload" type=file name="files[]">
</form>
@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js"></script>
    <script src="~/Asset/JS/Felixx_ults.js"></script>
    <script>
    

    $('#upload').change(function (evt) {
        var files = evt.target.files; // FileList object
        if (files.length > 0) {
            var xl2json = new ExcelToJSON();
            xl2json.parseExcel(files[0], ParseExcelData);
            evt.target.value = "";
        }
    });

    async function ParseExcelData(result) {
        console.log(result);
        if (result.length == 0) {
            alert(`Không có dữ liệu , xin kiểm tra lại !!!!!`);
            return;
        }
        else {
            result = result.slice(2).filter(x => x.hasOwnProperty("Department"));
            console.log(result);
            //const grid = await fetch("/ExData/GetExData")
            //const grid_data = await grid.json();
            Upload(result, 0);
            // !grid_data.data.length ? Upload(result, 'post',"/ExData/AddExData") : Upload_Update(result, grid_data.data);
        }
    }



    function Upload(dataList, index) {
        if (index < dataList.length) {
            var values = JSON.stringify(dataList[index]);

            //    var add = {
            //        method: `post`,
            //        headers: {
            //            'Accept': 'application/json',
            //            'Content-Type': 'application/json'
            //        },
            //        body: JSON.stringify({ values: values })
            //    };

            //fetch("/ExData/AddExData", add).then(() => Upload(dataList, index + 1));

            $.post("/ExData/AddExData", { values: values }, () => {
                Upload(dataList, index + 1)
            });

            //$.ajax({
            //    type: "POST",
            //    url: "/ExData/AddExData",
            //    data: { values: values},
            //    contentType: "application/json; charset=utf-8",
            //    dataType: "json",
            //    async: false, //_async,
            //    success: function (result) {
            //        Upload(dataList, index + 1)
            //    }
            //});

        }
        else {
            DevExpress.ui.notify("Import Data From Excel Successfully !! Total Records : " + dataList.length, 'success', 2000);
            $("#GRID").dxDataGrid("getDataSource").reload();
        }
    }
    </script>
    <script>
        const sum_col = (input) => {
            return {
                column: input,
                summaryType: "sum",
                displayFormat: "{0}",
                showInGroupFooter: true,
                alignByColumn: true,
                alignment: "center",
            };
        }
    </script>
    <script>
        $("#GRID").dxDataGrid({
            dataSource: DevExpress.data.AspNet.createStore({ key: "ID", loadUrl: "/ExData/GetExData", insertUrl: "/ExData/AddExData", updateUrl: "/ExData/UpdateExData", deleteUrl: "/ExData/DeleteExData" }),
            showBorders: true, showRowLines: true, editing: {
                allowAdding: true, allowDeleting: true, allowUpdating: true, mode: "popup", useIcons: true,
                columnAutoWidth: true,
                form: {
                    colCount: 4,
                    items: [
                        { itemType: "simple", dataField: "Department", validationRules: [{ type: "required", message: "The Department field is required." }] },
                        { itemType: "simple", dataField: "Workshop", validationRules: [{ type: "required", message: "The Workshop field is required." }] },
                        { itemType: "simple", dataField: "Line_no", validationRules: [{ type: "required", message: "The Line_no field is required." }] },
                        { itemType: "simple", dataField: "Emp_id", validationRules: [{ type: "required", message: "The Emp_id field is required." }] },
                        { itemType: "simple", dataField: "Emp_name", validationRules: [{ type: "required", message: "The Emp_name field is required." }] },
                        { itemType: "simple", dataField: "F8T9" },
                        { itemType: "simple", dataField: "F9T10" },
                        { itemType: "simple", dataField: "F10T11" },
                        { itemType: "simple", dataField: "F11T12" },
                        { itemType: "simple", dataField: "F12T1230" },
                        { itemType: "simple", dataField: "F1330T1430" },
                        { itemType: "simple", dataField: "F1430T1530" },
                        { itemType: "simple", dataField: "F1530T1630" },
                        { itemType: "simple", dataField: "F1630T1730" },
                        { itemType: "simple", dataField: "F1730T1830" }]
                }
            }, columns: [
                { dataField: "Department", minWidth: 50, caption: "部门", dataType: "string", validationRules: [{ type: "required", message: "The Department field is required." }] },
                { dataField: "Workshop", minWidth: 80, caption: "车间", dataType: "string", validationRules: [{ type: "required", message: "The Workshop field is required." }] },

                { dataField: "Line_no", minWidth: 120, caption: "线别", dataType: "string", validationRules: [{ type: "required", message: "The Line_no field is required." }] },
                { dataField: "Line_no", dataType: "string", validationRules: [{ type: "required", message: "The Line_no field is required." }], groupIndex: 0 },

                { dataField: "Emp_id", minWidth: 80, caption: "工号", dataType: "string", validationRules: [{ type: "required", message: "The Emp_id field is required." }] },
                { dataField: "Emp_name", minWidth: 150, caption: "姓名", dataType: "string", validationRules: [{ type: "required", message: "The Emp_name field is required." }] },
                { dataField: "F8T9", minWidth: 100, dataType: "number", caption: "8:00-9:00" },
                { dataField: "F9T10", minWidth: 100, dataType: "number", caption: "9:00-10:00" },
                { dataField: "F10T11", minWidth: 100, dataType: "number", caption: "10:00-11:00" },
                { dataField: "F11T12", minWidth: 100, dataType: "number", caption: "11:00-12:00" },
                { dataField: "F12T1230", minWidth: 100, dataType: "number", caption: "12:00-12:30" },
                {
                    caption: "上午小计", minWidth: 100, calculateCellValue: function (data) {
                        data_mor = data.F8T9 + data.F9T10 + data.F10T11 + data.F11T12 + data.F12T1230
                        return data_mor
                    }
                },
                { dataField: "F1330T1430", minWidth: 100, dataType: "number", caption: "13:30-14:30" },
                { dataField: "F1430T1530", minWidth: 100, dataType: "number", caption: "14:30-15:30" },
                { dataField: "F1530T1630", minWidth: 100, dataType: "number", caption: "15:30-16:30" },
                { dataField: "F1630T1730", minWidth: 100, dataType: "number", caption: "16:30-17:30" },
                { dataField: "F1730T1830", minWidth: 100, dataType: "number", caption: "17:30-18:30" },

                {
                    caption: "下午小计", minWidth: 100, calculateCellValue: function (data) {
                        data_aft = data.F1330T1430 + data.F1430T1530 + data.F1530T1630 + data.F1630T1730 + data.F1730T1830
                        return data_aft
                    }
                },

                {
                    caption: "汇总", minWidth: 100, calculateCellValue: function (data) {
                        return data_mor + data_aft
                    }
                }
            ], summary: {
                recalculateWhileEditing: true,
                showBorders:true,
                groupItems: [
                    sum_col("F8T9"),
                    sum_col("F9T10"),
                    sum_col("F10T11"),                   
                    sum_col("F11T12"),                   
                    sum_col("F12T1230"),                  
                    sum_col("上午小计"),                   
                    sum_col("F1330T1430"),                  
                    sum_col("F1430T1530"),
                    sum_col("F1530T1630"),
                    sum_col("F1630T1730"),                  
                    sum_col("F1730T1830"),                  
                    sum_col("下午小计"),                  
                    sum_col("汇总"),
                    {
                        column: "Line_no",
                        summaryType: "max",
                        displayFormat: "{0}",
                        showInGroupFooter: true,

                    },
                ],
                totalItems: [
                    {
                        column: "Line_no",
                        summaryType: "max",
                        displayFormat: " ESP 汇总 ",
                        showInGroupFooter: true,
                    },
                    sum_col("F8T9"),
                    sum_col("F9T10"),
                    sum_col("F10T11"),
                    sum_col("F11T12"),
                    sum_col("F12T1230"),
                    sum_col("上午小计"),
                    sum_col("F1330T1430"),
                    sum_col("F1430T1530"),
                    sum_col("F1530T1630"),
                    sum_col("F1630T1730"),
                    sum_col("F1730T1830"),
                    sum_col("下午小计"),
                    sum_col("汇总"),
                ]

            }, onCellPrepared: (e) => {
                e.cellElement.css("text-align", "center");
                e.cellElement.css("color", "black");
            

                if (e.rowType === "header") {
                    e.cellElement.css("background-color", "rgb(141,180,226)");
                    //
                } else if (e.rowType === "group") {
                    e.cellElement.css("display", "none");
                    //
                } else if (e.rowType === "groupFooter") {
                    e.columnIndex > 5 ? e.cellElement.css("border", "1px solid #ddd"): null;
                    e.cellElement.css("background-color", "rgb(253,233,217)");
                } else if (e.rowType === "totalFooter") {
                    e.cellElement.css("background-color", "rgb(250,191,143)");
                    e.cellElement.css("margin", "0px");
                    e.columnIndex > 5 ? e.cellElement.css("border", "1px solid #ddd") : null;
                }
            },
            onContentReady: (e) => {         
                // var elements = document.getElementsByClassName("dx-command-expand");
                // for (i=0;i<elements.length;i++){
                //     elements[i].style.width = "1px";
                //     elements[i].style.minWidth = "1px";
                //     elements[i].style.maxWidth = "1px";
                //     console.log(elements[i]);
                // }  
                var e = document.querySelectorAll('col:first-child')       
                for (i=0;i<e.length;i++){
                    e[i].style.width = "1px";
                    e[i].style.minWidth = "1px";
                    e[i].style.maxWidth = "1px";
                    console.log(e[i]);
                }  
            }     
        });


    </script>
    

   
}